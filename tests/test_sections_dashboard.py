#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Amity Metrics Dashboard —Å —Å–µ–∫—Ü–∏—è–º–∏
"""

import requests
import json
import time

BASE_URL = "http://localhost:5000"

def test_sections_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ–∫—Ü–∏–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ–∫—Ü–∏–π...")
    
    try:
        response = requests.get(f"{BASE_URL}/api/sections", timeout=5)
        response.raise_for_status()
        
        data = response.json()
        print(f"‚úÖ API —Å–µ–∫—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   - –°–µ–∫—Ü–∏–π: {len(data.get('sections', {}))}")
        print(f"   - –ú–µ—Ç—Ä–∏–∫: {len(data.get('all_metrics', {}))}")
        print(f"   - –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã: {len(data.get('time_intervals', []))}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏–∏
        sections = data.get('sections', {})
        for section_name, metrics in sections.items():
            print(f"   - {section_name}: {len(metrics)} –º–µ—Ç—Ä–∏–∫")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API —Å–µ–∫—Ü–∏–π: {e}")
        return False

def test_section_metrics():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –º–µ—Ç—Ä–∏–∫ —Å–µ–∫—Ü–∏–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –º–µ—Ç—Ä–∏–∫ —Å–µ–∫—Ü–∏–∏...")
    
    try:
        response = requests.get(f"{BASE_URL}/api/sections/KPI/metrics", timeout=5)
        response.raise_for_status()
        
        data = response.json()
        print(f"‚úÖ API –º–µ—Ç—Ä–∏–∫ —Å–µ–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   - –°–µ–∫—Ü–∏—è: {data.get('section')}")
        print(f"   - –ú–µ—Ç—Ä–∏–∫ –≤ —Å–µ–∫—Ü–∏–∏: {len(data.get('metrics', {}))}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –º–µ—Ç—Ä–∏–∫—É
        metrics = data.get('metrics', {})
        if metrics:
            first_metric_id = list(metrics.keys())[0]
            first_metric = metrics[first_metric_id]
            print(f"   - –ü—Ä–∏–º–µ—Ä –º–µ—Ç—Ä–∏–∫–∏: {first_metric_id} - {first_metric.get('label')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API –º–µ—Ç—Ä–∏–∫ —Å–µ–∫—Ü–∏–∏: {e}")
        return False

def test_metric_history():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Ç—Ä–∏–∫–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Ç—Ä–∏–∫–∏...")
    
    try:
        response = requests.get(f"{BASE_URL}/api/metrics/system_cpu_usage/history?interval=30", timeout=10)
        response.raise_for_status()
        
        data = response.json()
        print(f"‚úÖ API –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   - –°—Ç–∞—Ç—É—Å: {data.get('status', 'unknown')}")
        
        if data.get('data') and data['data'].get('result'):
            result = data['data']['result'][0]
            print(f"   - –¢–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {len(result.get('values', []))}")
            
            if result.get('values'):
                values = [v[1] for v in result['values'] if v[1] is not None]
                if values:
                    print(f"   - Min: {min(values):.3f}, Max: {max(values):.3f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Ç—Ä–∏–∫–∏: {e}")
        return False

def test_main_page():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
    
    try:
        response = requests.get(f"{BASE_URL}/", timeout=5)
        response.raise_for_status()
        
        content = response.text
        print(f"‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è")
        print(f"   - –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(content)} –±–∞–π—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        checks = [
            ("Amity Metrics Dashboard", "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞—à–±–æ—Ä–¥–∞"),
            ("time-interval", "–°–µ–ª–µ–∫—Ç–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"),
            ("debug-toggle", "–ö–Ω–æ–ø–∫–∞ debug"),
            ("export-report", "–ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"),
            ("sections-container", "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–µ–∫—Ü–∏–π"),
            ("plotly-latest.min.js", "Plotly.js")
        ]
        
        for check, description in checks:
            if check in content:
                print(f"   ‚úÖ {description}: –Ω–∞–π–¥–µ–Ω–æ")
            else:
                print(f"   ‚ùå {description}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return False

def test_debug_mode():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç debug-—Ä–µ–∂–∏–º"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ debug-—Ä–µ–∂–∏–º–∞...")
    
    try:
        response = requests.get(f"{BASE_URL}/?debug=true", timeout=5)
        response.raise_for_status()
        
        content = response.text
        print(f"‚úÖ Debug-—Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   - –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(content)} –±–∞–π—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ debug-—ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if "debug-toggle" in content and "active" in content:
            print(f"   ‚úÖ Debug-–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å: –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"   ‚ùå Debug-–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å: –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ debug-—Ä–µ–∂–∏–º–∞: {e}")
        return False

def test_metrics_data():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫...")
    
    try:
        response = requests.get(f"{BASE_URL}/data", timeout=5)
        response.raise_for_status()
        
        data = response.json()
        print(f"‚úÖ API –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   - –ú–µ—Ç—Ä–∏–∫: {len(data.get('metrics', {}))}")
        print(f"   - Prominent –º–µ—Ç—Ä–∏–∫: {len(data.get('prominent', {}))}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Amity Metrics Dashboard —Å —Å–µ–∫—Ü–∏—è–º–∏")
    print("=" * 70)
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    time.sleep(3)
    
    tests = [
        test_sections_config,
        test_section_metrics,
        test_metric_history,
        test_main_page,
        test_debug_mode,
        test_metrics_data
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            results.append(False)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 70)
    print("üìä –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    
    passed = sum(results)
    total = len(results)
    
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ú–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å —Å–µ–∫—Ü–∏—è–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        print("   - –°–µ–∫—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫ (KPI, PostgreSQL, JVM, Jetty, System)")
        print("   - Debug-—Ä–µ–∂–∏–º —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π")
        print("   - –ì–∏–±–∫–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (trend + bar)")
        print("   - –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–æ–≤")
        print("   - –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1) 