#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è endpoints –¥–∞—à–±–æ—Ä–¥–∞
"""

import requests
import json
import sys

BASE_URL = "http://localhost:5000"

def test_endpoint(endpoint, description):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç endpoint –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {description}...")
        print(f"URL: {BASE_URL}{endpoint}")
        
        response = requests.get(f"{BASE_URL}{endpoint}", timeout=5)
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –î–∞–Ω–Ω—ã–µ: {json.dumps(data, indent=2, ensure_ascii=False)}")
                return True
            except json.JSONDecodeError:
                print(f"‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON: {response.text[:200]}...")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞! –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text[:200]}...")
            return False
            
    except requests.exceptions.ConnectionError:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {BASE_URL}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints –¥–∞—à–±–æ—Ä–¥–∞")
    print("=" * 50)
    
    endpoints = [
        ("/", "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"),
        ("/api/test", "–¢–µ—Å—Ç–æ–≤—ã–π endpoint"),
        ("/api/debug", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π endpoint"),
        ("/api/sections", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–π"),
        ("/api/kpi/config", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è KPI"),
        ("/data", "–î–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫"),
        ("/dashboard_data", "–î–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞"),
        ("/api/metrics/batch", "Batch –º–µ—Ç—Ä–∏–∫–∏"),
    ]
    
    results = []
    
    for endpoint, description in endpoints:
        success = test_endpoint(endpoint, description)
        results.append((endpoint, success))
    
    print("\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    
    for endpoint, success in results:
        status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{status}: {endpoint}")
    
    successful = sum(1 for _, success in results if success)
    total = len(results)
    
    print(f"\n–ò—Ç–æ–≥–æ: {successful}/{total} endpoints —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    if successful == total:
        print("üéâ –í—Å–µ endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ endpoints")

if __name__ == "__main__":
    main() 