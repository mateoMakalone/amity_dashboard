#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ KPI Dashboard
"""

import requests
import json
import time

BASE_URL = "http://localhost:5000"

def test_kpi_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ KPI"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ KPI...")
    
    try:
        response = requests.get(f"{BASE_URL}/api/kpi/config", timeout=5)
        response.raise_for_status()
        
        data = response.json()
        print(f"‚úÖ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   - KPI –º–µ—Ç—Ä–∏–∫: {len(data.get('kpi_metrics', []))}")
        print(f"   - –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤—Ä–µ–º–µ–Ω–∏: {len(data.get('time_intervals', []))}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é KPI –º–µ—Ç—Ä–∏–∫—É
        if data.get('kpi_metrics'):
            first_kpi = data['kpi_metrics'][0]
            print(f"   - –ü—Ä–∏–º–µ—Ä KPI: {first_kpi['id']} - {first_kpi['title']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_prometheus_proxy():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∫—Å–∏-—ç–Ω–¥–ø–æ–∏–Ω—Ç Prometheus"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ Prometheus...")
    
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        params = {
            'query': 'system_cpu_usage',
            'start': str(int(time.time()) - 300),  # 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
            'end': str(int(time.time())),
            'step': '30'
        }
        
        response = requests.get(f"{BASE_URL}/api/prometheus/query_range", params=params, timeout=10)
        response.raise_for_status()
        
        data = response.json()
        print(f"‚úÖ –ü—Ä–æ–∫—Å–∏ Prometheus —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   - –°—Ç–∞—Ç—É—Å: {data.get('status', 'unknown')}")
        
        if data.get('data') and data['data'].get('result'):
            result = data['data']['result'][0]
            print(f"   - –¢–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {len(result.get('values', []))}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ Prometheus: {e}")
        return False

def test_main_page():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
    
    try:
        response = requests.get(f"{BASE_URL}/", timeout=5)
        response.raise_for_status()
        
        content = response.text
        print(f"‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è")
        print(f"   - –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(content)} –±–∞–π—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        checks = [
            ("Amity KPI Dashboard", "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞—à–±–æ—Ä–¥–∞"),
            ("time-interval", "–°–µ–ª–µ–∫—Ç–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"),
            ("export-report", "–ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"),
            ("kpi-grid", "–°–µ—Ç–∫–∞ KPI"),
            ("plotly-latest.min.js", "Plotly.js")
        ]
        
        for check, description in checks:
            if check in content:
                print(f"   ‚úÖ {description}: –Ω–∞–π–¥–µ–Ω–æ")
            else:
                print(f"   ‚ùå {description}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return False

def test_metrics_data():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫...")
    
    try:
        response = requests.get(f"{BASE_URL}/data", timeout=5)
        response.raise_for_status()
        
        data = response.json()
        print(f"‚úÖ API –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   - –ú–µ—Ç—Ä–∏–∫: {len(data.get('metrics', {}))}")
        print(f"   - Prominent –º–µ—Ç—Ä–∏–∫: {len(data.get('prominent', {}))}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ KPI Dashboard")
    print("=" * 50)
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    time.sleep(3)
    
    tests = [
        test_kpi_config,
        test_prometheus_proxy,
        test_main_page,
        test_metrics_data
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            results.append(False)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    print("üìä –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    
    passed = sum(results)
    total = len(results)
    
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ú–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1) 