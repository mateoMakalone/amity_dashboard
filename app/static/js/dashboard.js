/**
 * –ú–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Amity Metrics Dashboard
 * –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–µ–∫—Ü–∏–π, debug-—Ä–µ–∂–∏–º–∞, –≥–∏–±–∫–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á—ë—Ç–æ–≤
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let sectionsConfig = {};
let allMetrics = {};
let timeIntervals = [];
let currentInterval = 30; // –º–∏–Ω—É—Ç—ã
let debugMode = false;
let updateTimer = null;
let isExporting = false;

let firstLoad = true;
// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
const formatFunctions = {
    fixed0: x => x.toFixed(0),
    fixed1: x => x.toFixed(1),
    fixed2: x => x.toFixed(2),
    fixed3: x => x.toFixed(3),
    percent: x => Math.round(x * 100),
    mb: x => (x / 1024 / 1024).toFixed(1)
};

// --- –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ id ---
function normalizeId(name) {
    return name.replace(/[^a-zA-Z0-9_-]/g, '_');
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞
 */
async function initDashboard() {
    console.log('üöÄ Starting dashboard initialization...');
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º debug-—Ä–µ–∂–∏–º –∏–∑ URL
        const urlParams = new URLSearchParams(window.location.search);
        debugMode = urlParams.get('debug') === 'true';
        console.log('üîß Debug mode:', debugMode);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ–∫—Ü–∏–π
        console.log('üìã Loading sections configuration...');
        await loadSectionsConfig();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        console.log('üéõÔ∏è Initializing controls...');
        initControls();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        console.log('üìä Loading sections data...');
        await loadSectionsData();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        console.log('‚è∞ Starting auto-update...');
        startAutoUpdate();
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        console.log('‚úÖ Dashboard initialization completed');
        hideLoading();
        
    } catch (error) {
        console.error('‚ùå Dashboard initialization failed:', error);
        console.error('Error stack:', error.stack);
        showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞: ' + error.message);
        hideLoading();
    }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ–∫—Ü–∏–π –∏ –º–µ—Ç—Ä–∏–∫
 */
async function loadSectionsConfig() {
    console.log('üîç Fetching /api/sections...');
    try {
        const response = await fetch('/api/sections');
        console.log('üì° Response status:', response.status);
        console.log('üì° Response headers:', response.headers);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        console.log('üìã Received sections config:', data);
        
        sectionsConfig = data.sections || {};
        allMetrics = data.all_metrics || {};
        timeIntervals = data.time_intervals || [];
        
        console.log('üìä Sections config loaded:', Object.keys(sectionsConfig));
        console.log('üìà All metrics count:', Object.keys(allMetrics).length);
        console.log('‚è∞ Time intervals:', timeIntervals);
        
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        const intervalSelect = document.getElementById('time-interval');
        if (intervalSelect && timeIntervals.length > 0) {
            intervalSelect.innerHTML = '';
            timeIntervals.forEach(interval => {
                const option = document.createElement('option');
                option.value = interval.value;
                option.textContent = interval.label;
                intervalSelect.appendChild(option);
            });
            intervalSelect.value = currentInterval;
            console.log('‚è∞ Time interval selector updated');
        }
        
    } catch (error) {
        console.error('‚ùå Failed to load sections config:', error);
        console.error('Error details:', {
            message: error.message,
            stack: error.stack,
            url: '/api/sections'
        });
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ–∫—Ü–∏–π: ' + error.message);
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
function initControls() {
    // –°–µ–ª–µ–∫—Ç–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–∏
    const intervalSelect = document.getElementById('time-interval');
    if (intervalSelect) {
        intervalSelect.value = currentInterval;
        intervalSelect.addEventListener('change', async (e) => {
            currentInterval = parseInt(e.target.value);
            await loadSectionsData();
            startAutoUpdate(); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        });
    }
    
    // –ö–Ω–æ–ø–∫–∞ debug
    const debugToggle = document.getElementById('debug-toggle');
    if (debugToggle) {
        debugToggle.classList.toggle('active', debugMode);
        debugToggle.addEventListener('click', toggleDebugMode);
    }
    
    // –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
    const exportBtn = document.getElementById('export-report');
    if (exportBtn) {
        exportBtn.addEventListener('click', exportReport);
    }
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç debug-—Ä–µ–∂–∏–º
 */
function toggleDebugMode() {
    debugMode = !debugMode;
    
    const debugToggle = document.getElementById('debug-toggle');
    if (debugToggle) {
        debugToggle.classList.toggle('active', debugMode);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º URL
    const url = new URL(window.location);
    if (debugMode) {
        url.searchParams.set('debug', 'true');
    } else {
        url.searchParams.delete('debug');
    }
    window.history.replaceState({}, '', url);
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å debug-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    loadSectionsData();
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π
 */
async function loadSectionsData() {
    console.log('üìä Starting to load sections data...');
    console.log('üìã Available sections:', Object.keys(sectionsConfig));
    
    try {
        const container = document.getElementById('sections-container');
        const isFirst = firstLoad && container;
        console.log('üîÑ First load:', firstLoad, 'Container exists:', !!container);
        
        if (isFirst) {
            console.log('üîÑ First load detected, showing loading indicator and rendering sections...');
            showLoading();
            updateStatus('loading');
            renderSections();
        } 
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫ –æ–¥–Ω–∏–º batch –∑–∞–ø—Ä–æ—Å–æ–º
        console.log('üì• Loading batch metrics data...');
        const batchData = await loadBatchMetricsData();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏
        console.log('üì• Updating sections with batch data...');
        const sectionPromises = Object.keys(sectionsConfig).map(async (sectionName) => {
            console.log(`üì• Updating section: ${sectionName}`);
            await updateSectionWithBatchData(sectionName, batchData);
        });
        
        await Promise.all(sectionPromises);
        console.log('‚úÖ All sections updated successfully');
        
        updateStatus('ok');
        
    } catch (error) {
        console.error('‚ùå Failed to load sections data:', error);
        console.error('Error stack:', error.stack);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
        updateStatus('error');
    } finally {
        if (firstLoad) {
            console.log('üîÑ First load completed, hiding loading indicator');
            hideLoading();
            firstLoad = false;
        }
    }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫ –æ–¥–Ω–∏–º batch –∑–∞–ø—Ä–æ—Å–æ–º
 */
async function loadBatchMetricsData() {
    console.log('üìä Loading batch metrics data...');
    
    const params = new URLSearchParams({
        interval: currentInterval.toString()
    });
    
    const url = `/api/metrics/batch/history?${params}`;
    console.log(`üîó Fetching batch data from: ${url}`);
    
    try {
        const response = await fetch(url);
        console.log(`üì° Batch response status:`, response.status);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        console.log(`üìä Received batch data for ${Object.keys(data.data || {}).length} metrics`);
        
        return data.data || {};
        
    } catch (error) {
        console.error(`‚ùå Failed to load batch metrics data:`, error);
        throw error;
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ–∫—Ü–∏—é —Å batch –¥–∞–Ω–Ω—ã–º–∏
 */
async function updateSectionWithBatchData(sectionName, batchData) {
    const normId = normalizeId(sectionName);
    console.log(`üì• Updating section ${sectionName} with batch data`);
    
    try {
        const sectionMetrics = sectionsConfig[sectionName] || [];
        console.log(`üìä Section ${sectionName} has ${sectionMetrics.length} metrics:`, sectionMetrics);
        
        const content = document.getElementById(`section-content-${normId}`);
        console.log(`üéØ Section content element:`, content ? 'found' : 'not found');
        
        if (!content) {
            console.warn(`‚ö†Ô∏è Content element for section ${sectionName} not found`);
            return;
        }
        
        // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Å–µ–∫—Ü–∏–∏
        const loadingIndicator = content.querySelector('.loading-indicator');
        if (loadingIndicator) {
            loadingIndicator.remove();
        }
        
        // –ï—Å–ª–∏ –≤ —Å–µ–∫—Ü–∏–∏ –Ω–µ—Ç –º–µ—Ç—Ä–∏–∫ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º stub –∏ –≤—ã—Ö–æ–¥–∏–º
        if (sectionMetrics.length === 0) {
            console.log(`üì≠ Section ${sectionName} has no metrics`);
            // –ï—Å–ª–∏ –µ—â—ë –Ω–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ, —Å–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (!content.hasChildNodes()) {
                content.innerHTML = '<div class="no-data">–ù–µ—Ç –º–µ—Ç—Ä–∏–∫ –≤ —ç—Ç–æ–π —Å–µ–∫—Ü–∏–∏</div>';
            }
            return;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å–µ–∫—Ü–∏–∏ —Å batch –¥–∞–Ω–Ω—ã–º–∏
        console.log(`üîÑ Processing ${sectionMetrics.length} metrics for section ${sectionName}`);
        
        sectionMetrics.forEach(metricId => {
            const metricData = batchData[metricId];
            const existingCard = document.getElementById(`metric-${metricId}`);
            
            if (existingCard) {
                console.log(`üîÑ Updating existing card for metric: ${metricId}`);
                // –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
                if (metricData && metricData.status === 'success') {
                    const config = allMetrics[metricId];
                    updateMetricCard(metricId, {
                        config: config,
                        history: metricData.data
                    });
                } else {
                    existingCard.innerHTML = `<div class="metric-header"><h4 class="metric-title">${metricId}</h4></div><div class="metric-error">–û—à–∏–±–∫–∞: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>`;
                }
            } else {
                console.log(`üÜï Creating new card for metric: ${metricId}`);
                // –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∏ –¥–æ–±–∞–≤–ª—è–µ–º
                let error = null;
                let data = null;
                
                if (metricData && metricData.status === 'success') {
                    data = {
                        config: allMetrics[metricId],
                        history: metricData.data
                    };
                } else {
                    error = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
                }
                
                const metricCard = createMetricCard(metricId, data, error);
                content.appendChild(metricCard);
                
                // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
                if (data && data.history && data.history.result && data.history.result.length > 0) {
                    const config = data.config;
                    const history = data.history;
                    const resultObj = history.result[0];
                    if (resultObj.values && resultObj.values.length > 0) {
                        if (config.type.includes('trend')) {
                            renderTrendChart(config, resultObj.values, `trend-${metricId}`);
                        }
                    }
                }
            }
        });
        
        console.log(`‚úÖ Section ${sectionName} updated successfully`);
        
    } catch (error) {
        console.error(`‚ùå Failed to update section ${sectionName}:`, error);
        console.error('Error stack:', error.stack);
        const content = document.getElementById(`section-content-${normId}`);
        if (content) {
            content.innerHTML = `<div class="metric-error">–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ü–∏–∏: ${error.message}</div>`;
        }
    }
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏—Ç —Å–µ–∫—Ü–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 */
function renderSections() {
    console.log('üé® Rendering sections...');
    const container = document.getElementById('sections-container');
    if (!container) {
        console.error('‚ùå Sections container not found');
        return;
    }
    
    console.log('üìã Available sections:', Object.keys(sectionsConfig));
    container.innerHTML = '';
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏–∏: KPI –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤–∞—è
    const sectionNames = Object.keys(sectionsConfig);
    sectionNames.sort((a, b) => {
        if (a === 'KPI') return -1;
        if (b === 'KPI') return 1;
        return 0;
    });
    
    console.log('üìä Sorted section names:', sectionNames);
    
    sectionNames.forEach(sectionName => {
        console.log(`üé® Creating section: ${sectionName}`);
        const section = createSection(sectionName);
        container.appendChild(section);
    });
    
    console.log('‚úÖ Sections rendering completed');
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –º–µ—Ç—Ä–∏–∫
 */
function createSection(sectionName) {
    const normId = normalizeId(sectionName);
    const section = document.createElement('div');
    section.className = 'section';
    section.id = `section-${normId}`;

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
    const header = document.createElement('div');
    header.className = 'section-header';
    header.addEventListener('click', () => toggleSection(sectionName));

    const title = document.createElement('h3');
    title.className = 'section-title';
    title.textContent = sectionName;

    const toggle = document.createElement('span');
    toggle.className = 'section-toggle';
    toggle.textContent = '‚ñº';

    header.appendChild(title);
    header.appendChild(toggle);
    section.appendChild(header);

    // --- –í–ê–ñ–ù–û: —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–µ—Ç—Ä–∏–∫ ---
    const content = document.createElement('div');
    content.className = 'section-content';
    content.id = `section-content-${normId}`;
    section.appendChild(content);

    return section;
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏
 */
function toggleSection(sectionName) {
    const normId = normalizeId(sectionName);
    const section = document.getElementById(`section-${normId}`);
    if (section) {
        section.classList.toggle('collapsed');
    }
}





/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –º–µ—Ç—Ä–∏–∫–∏
 */
function createMetricCard(metricId, data, error) {
    const card = document.createElement('div');
    card.className = 'metric-card';
    card.id = `metric-${metricId}`;

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
    const header = document.createElement('div');
    header.className = 'metric-header';
    
    const title = document.createElement('h4');
    title.className = 'metric-title';
    title.textContent = data?.config?.label || metricId;
    
    const status = document.createElement('span');
    status.className = 'metric-status';
    
    if (error) {
        status.textContent = '‚ùå';
        status.title = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
    } else if (data?.config) {
        const statusInfo = getMetricStatus(data.config, data.history);
        status.textContent = statusInfo.icon;
        status.title = statusInfo.message;
        status.className = `metric-status status-${statusInfo.level}`;
    } else {
        status.textContent = '‚ö†Ô∏è';
        status.title = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    }
    
    header.appendChild(title);
    header.appendChild(status);
    card.appendChild(header);

    // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    const content = document.createElement('div');
    content.className = 'metric-content';

    if (error) {
        content.innerHTML = `<div class="metric-error">–û—à–∏–±–∫–∞: ${error}</div>`;
    } else if (data?.history) {
        const currentValue = getCurrentValue(data.history);
        console.log(`üìä Creating card for ${metricId}: currentValue=${currentValue}, config=`, data.config);
        
        if (currentValue !== null) {
            const formattedValue = formatValue(currentValue, data.config.format || 'fixed2');
            const unit = data.config.unit || '';
            
            const valueDisplay = document.createElement('div');
            valueDisplay.className = 'metric-value';
            valueDisplay.innerHTML = `
                <span class="value-number">${formattedValue}</span>
                ${unit ? `<span class="value-unit">${unit}</span>` : ''}
            `;
            content.appendChild(valueDisplay);
            
            console.log(`‚úÖ Value displayed for ${metricId}: ${formattedValue} ${unit}`);
        } else {
            const noDataDisplay = document.createElement('div');
            noDataDisplay.className = 'metric-no-data';
            noDataDisplay.textContent = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
            content.appendChild(noDataDisplay);
            console.warn(`‚ö†Ô∏è No current value for ${metricId}`);
        }

        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ - —Ç–æ–ª—å–∫–æ trend
        if (data.config.type.includes('trend')) {
            const trendContainer = document.createElement('div');
            trendContainer.id = `trend-${metricId}`;
            trendContainer.className = 'metric-chart';
            content.appendChild(trendContainer);
        }
    } else {
        const noDataDisplay = document.createElement('div');
        noDataDisplay.className = 'metric-no-data';
        noDataDisplay.textContent = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
        content.appendChild(noDataDisplay);
        console.warn(`‚ö†Ô∏è No data for ${metricId}`);
    }

    card.appendChild(content);
    return card;
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É –º–µ—Ç—Ä–∏–∫–∏ –±–µ–∑ –µ—ë –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è.
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –≥—Ä–∞—Ñ–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –±–µ–∑ –º–µ—Ä—Ü–∞–Ω–∏—è.
 */
function updateMetricCard(metricId, data) {
    const card = document.getElementById(`metric-${metricId}`);
    if (!card) {
        console.warn(`‚ö†Ô∏è Card not found for update: ${metricId}`);
        return;
    }

    console.log(`üîÑ Updating card for ${metricId}:`, data);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    const status = card.querySelector('.metric-status');
    if (status && data?.config) {
        const statusInfo = getMetricStatus(data.config, data.history);
        status.textContent = statusInfo.icon;
        status.title = statusInfo.message;
        status.className = `metric-status status-${statusInfo.level}`;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    if (data?.history) {
        const currentValue = getCurrentValue(data.history);
        console.log(`üìä Updating value for ${metricId}: currentValue=${currentValue}`);
        
        const content = card.querySelector('.metric-content');
        if (content) {
            if (currentValue !== null) {
                const formattedValue = formatValue(currentValue, data.config.format || 'fixed2');
                const unit = data.config.unit || '';
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                let valueDisplay = content.querySelector('.metric-value');
                if (!valueDisplay) {
                    valueDisplay = document.createElement('div');
                    valueDisplay.className = 'metric-value';
                    content.insertBefore(valueDisplay, content.firstChild);
                }
                
                valueDisplay.innerHTML = `
                    <span class="value-number">${formattedValue}</span>
                    ${unit ? `<span class="value-unit">${unit}</span>` : ''}
                `;
                
                console.log(`‚úÖ Value updated for ${metricId}: ${formattedValue} ${unit}`);
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                let noDataDisplay = content.querySelector('.metric-no-data');
                if (!noDataDisplay) {
                    noDataDisplay = document.createElement('div');
                    noDataDisplay.className = 'metric-no-data';
                    noDataDisplay.textContent = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
                    content.insertBefore(noDataDisplay, content.firstChild);
                }
                
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                const oldValueDisplay = content.querySelector('.metric-value');
                if (oldValueDisplay) {
                    oldValueDisplay.remove();
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ - —Ç–æ–ª—å–∫–æ trend
            if (data.history?.result?.[0]?.values) {
                const values = data.history.result[0].values;
                
                if (data.config.type.includes('trend')) {
                    const trendContainer = document.getElementById(`trend-${metricId}`);
                    if (trendContainer) {
                        renderTrendChart(data.config, values, `trend-${metricId}`);
                    }
                }
            }
        }
    }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –º–µ—Ç—Ä–∏–∫–∏
 */
function getMetricStatus(config, history) {
    const currentValue = getCurrentValue(history);
    
    if (currentValue === null || currentValue === undefined) {
        return { status: 'unknown', color: '#6c757d' };
    }
    
    const thresholds = config.thresholds;
    if (!thresholds) {
        return { status: 'ok', color: '#28a745' };
    }
    
    if (thresholds.critical && currentValue >= thresholds.critical) {
        return { status: 'critical', color: '#dc3545' };
    }
    
    if (thresholds.warning && currentValue >= thresholds.warning) {
        return { status: 'warning', color: '#ffc107' };
    }
    
    return { status: 'ok', color: '#28a745' };
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
 */
function getCurrentValue(history) {
    if (!history || !history.result || history.result.length === 0) {
        console.warn('‚ö†Ô∏è No history data for current value calculation');
        return null;
    }
    
    const result = history.result[0];
    if (!result || !result.values || result.values.length === 0) {
        console.warn('‚ö†Ô∏è No values in history result');
        return null;
    }
    
    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    const lastValue = result.values[result.values.length - 1];
    if (!lastValue || lastValue.length < 2) {
        console.warn('‚ö†Ô∏è Invalid last value format:', lastValue);
        return null;
    }
    
    const value = lastValue[1];
    console.log(`üìä Current value extracted: ${value} (type: ${typeof value})`);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
    if (typeof value === 'string') {
        const parsed = parseFloat(value);
        if (isNaN(parsed)) {
            console.warn(`‚ö†Ô∏è Could not parse string value: ${value}`);
            return null;
        }
        return parsed;
    }
    
    return value;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
 */
function formatValue(value, format) {
    if (value === null || value === undefined || isNaN(value)) {
        return 'N/A';
    }

    try {
        switch (format) {
            case 'fixed0':
                return value.toFixed(0);
            case 'fixed1':
                return value.toFixed(1);
            case 'fixed2':
                return value.toFixed(2);
            case 'fixed3':
                return value.toFixed(3);
            case 'percent':
                return Math.round(value * 100) + '%';
            case 'mb':
                const mbValue = value / 1024 / 1024;
                return mbValue.toFixed(1) + ' –ú–ë';
            case 'kb':
                const kbValue = value / 1024;
                return kbValue.toFixed(1) + ' –ö–ë';
            case 'bytes':
                if (value < 1024) return value.toFixed(0) + ' –ë';
                if (value < 1024 * 1024) return (value / 1024).toFixed(1) + ' –ö–ë';
                if (value < 1024 * 1024 * 1024) return (value / 1024 / 1024).toFixed(1) + ' –ú–ë';
                return (value / 1024 / 1024 / 1024).toFixed(1) + ' –ì–ë';
            default:
                return value.toString();
        }
    } catch (error) {
        console.error('Error formatting value:', value, format, error);
        return value.toString();
    }
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏—Ç –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ (trend)
 */
function renderTrendChart(config, values, containerId) {
    if (!values || values.length === 0) {
        console.warn(`‚ö†Ô∏è No data for trend chart: ${containerId}`);
        return;
    }

    try {
        const container = document.getElementById(containerId);
        if (!container) {
            console.warn(`‚ö†Ô∏è Container not found: ${containerId}`);
            return;
        }

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const timestamps = values.map(v => v[0]);
        const dataValues = values.map(v => v[1]);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const validValues = dataValues.filter(v => v !== null && v !== undefined && !isNaN(v));
        if (validValues.length === 0) {
            console.warn(`‚ö†Ô∏è No valid data for trend chart: ${containerId}`);
            return;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ª—É—á—à–µ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        const minValue = Math.min(...validValues);
        const maxValue = Math.max(...validValues);
        const range = maxValue - minValue;
        
        // –ï—Å–ª–∏ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
        let yMin = minValue;
        let yMax = maxValue;
        if (range === 0) {
            yMin = minValue - Math.abs(minValue) * 0.1;
            yMax = maxValue + Math.abs(maxValue) * 0.1;
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º 10% –æ—Ç—Å—Ç—É–ø–∞ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
            const padding = range * 0.1;
            yMin = minValue - padding;
            yMax = maxValue + padding;
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        const timeLabels = timestamps.map(ts => {
            const date = new Date(ts * 1000);
            return date.toLocaleTimeString('ru-RU', { 
                hour: '2-digit', 
                minute: '2-digit',
                second: '2-digit'
            });
        });

        const trace = {
            x: timeLabels,
            y: dataValues,
            type: 'scatter',
            mode: 'lines+markers',
            line: { color: config.color || '#3498db', width: 2 },
            marker: { 
                color: config.color || '#3498db', 
                size: 4,
                opacity: 0.7 
            },
            name: config.label || containerId
        };

        const layout = {
            margin: { t: 20, b: 40, l: 50, r: 20 },
            height: 250,
            xaxis: { 
                title: '–í—Ä–µ–º—è',
                tickangle: -45,
                tickmode: 'auto',
                nticks: Math.min(10, timeLabels.length)
            },
            yaxis: { 
                title: config.unit || '–ó–Ω–∞—á–µ–Ω–∏–µ',
                range: [yMin, yMax]
            },
            showlegend: false
        };

        Plotly.newPlot(containerId, [trace], layout);
        console.log(`‚úÖ Trend chart rendered for ${containerId}: ${validValues.length} points, range [${minValue.toFixed(3)}, ${maxValue.toFixed(3)}]`);

    } catch (error) {
        console.error(`‚ùå Failed to render trend chart for ${containerId}:`, error);
    }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç
 */
async function exportReport() {
    if (isExporting) return;
    
    try {
        isExporting = true;
        const exportBtn = document.getElementById('export-report');
        if (exportBtn) {
            exportBtn.disabled = true;
            exportBtn.textContent = 'üì§ –≠–∫—Å–ø–æ—Ä—Ç...';
        }
        
        // –°–æ–∑–¥–∞–µ–º HTML-–æ—Ç—á—ë—Ç
        const reportHtml = await generateReportHtml();
        
        // –°–æ–∑–¥–∞–µ–º Blob –∏ —Å–∫–∞—á–∏–≤–∞–µ–º
        const blob = new Blob([reportHtml], { type: 'text/html' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = `amity-metrics-report-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.html`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
    } catch (error) {
        console.error('Export failed:', error);
        showError('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ' + error.message);
    } finally {
        isExporting = false;
        const exportBtn = document.getElementById('export-report');
        if (exportBtn) {
            exportBtn.disabled = false;
            exportBtn.textContent = 'üì§ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞';
        }
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-–æ—Ç—á—ë—Ç
 */
async function generateReportHtml() {
    const now = new Date().toLocaleString('ru-RU');
    
    let sectionsHtml = '';
    
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π
    for (const sectionName of Object.keys(sectionsConfig)) {
        const sectionMetrics = sectionsConfig[sectionName] || [];
        let metricsHtml = '';
        
        for (const metricId of sectionMetrics) {
            if (allMetrics[metricId]) {
                const config = allMetrics[metricId];
                metricsHtml += `
                    <div style="margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 6px;">
                        <h4 style="color: #495057; margin-bottom: 10px;">${config.label}</h4>
                        <div style="display: flex; gap: 15px;">
                            ${config.type.includes('trend') ? `
                                <div style="flex: 2;">
                                    <h5>–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥</h5>
                                    <div id="trend-${metricId}-export" style="height: 250px;"></div>
                                </div>
                            ` : ''}
                        </div>
                    </div>
                `;
            }
        }
        
        if (metricsHtml) {
            sectionsHtml += `
                <div style="margin-bottom: 30px;">
                    <h3 style="color: #495057; border-bottom: 2px solid #e9ecef; padding-bottom: 10px;">${sectionName}</h3>
                    ${metricsHtml}
                </div>
            `;
        }
    }
    
    return `
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <title>Amity Metrics Report - ${now}</title>
            <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; background: #f8f9fa; }
                .header { background: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                .content { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                h1 { color: #495057; margin: 0; }
                h3 { color: #495057; margin: 0 0 15px 0; }
                h4 { color: #495057; margin: 0 0 10px 0; }
                h5 { color: #6c757d; margin: 0 0 8px 0; }
                .debug-info {
                    margin-top: 20px;
                    padding: 10px;
                    background-color: #f8f9fa;
                    border: 1px solid #e9ecef;
                    border-radius: 4px;
                    font-size: 0.9em;
                    overflow-y: auto;
                    max-height: 200px; /* –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É */
                }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>–û—Ç—á—ë—Ç –º–µ—Ç—Ä–∏–∫ Amity</h1>
                <p>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${now}</p>
                <p>–ò–Ω—Ç–µ—Ä–≤–∞–ª: ${currentInterval} –º–∏–Ω—É—Ç</p>
            </div>
            <div class="content">
                ${sectionsHtml}
            </div>
            <script>
                // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–¥–µ—Å—å
                const sectionsConfig = ${JSON.stringify(sectionsConfig)};
                const allMetrics = ${JSON.stringify(allMetrics)};
                const currentInterval = ${currentInterval};
                
                // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
                async function loadAndRenderCharts() {
                    for (const sectionName of Object.keys(sectionsConfig)) {
                        const sectionMetrics = sectionsConfig[sectionName] || [];
                        
                        for (const metricId of sectionMetrics) {
                            if (allMetrics[metricId]) {
                                const config = allMetrics[metricId];
                                
                                try {
                                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                                    const response = await fetch('/api/metrics/' + metricId + '/history?interval=' + currentInterval);
                                    const data = await response.json();
                                    
                                    if (data.data && data.data.result && data.data.result.length > 0) {
                                        const result = data.data.result[0];
                                        
                                        if (result.values && result.values.length > 0) {
                                            const timestamps = result.values.map(([ts, _]) => new Date(ts * 1000));
                                            const values = result.values.map(([_, v]) => v);
                                            
                                            // –†–µ–Ω–¥–µ—Ä–∏–º –≥—Ä–∞—Ñ–∏–∫–∏ - —Ç–æ–ª—å–∫–æ trend
                                            if (config.type.includes('trend')) {
                                                const trendData = [{
                                                    x: timestamps,
                                                    y: values,
                                                    type: 'scatter',
                                                    mode: 'lines',
                                                    line: { color: config.color, width: 2 },
                                                    fill: 'tonexty',
                                                    fillcolor: config.color + '20'
                                                }];
                                                
                                                const trendLayout = {
                                                    margin: { t: 20, b: 40, l: 50, r: 20 },
                                                    height: 250,
                                                    xaxis: { title: '–í—Ä–µ–º—è' },
                                                    yaxis: { title: config.unit || '–ó–Ω–∞—á–µ–Ω–∏–µ' }
                                                };
                                                
                                                Plotly.newPlot('trend-' + metricId + '-export', trendData, trendLayout);
                                            }
                                        }
                                    }
                                } catch (error) {
                                    console.error('Failed to load chart for ' + metricId + ':', error);
                                }
                            }
                        }
                    }
                }
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≥—Ä–∞—Ñ–∏–∫–æ–≤
                loadAndRenderCharts();
            </script>
        </body>
        </html>
    `;
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
 */
function startAutoUpdate() {
    // –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö. –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –¥–ª—è realtime‚Äë—Ä–µ–∂–∏–º–∞,
    // –æ–±–Ω–æ–≤–ª—è—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –±–µ–∑ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    const AUTO_UPDATE_INTERVAL_MS = 1000;

    if (updateTimer) {
        clearInterval(updateTimer);
    }

    updateTimer = setInterval(async () => {
        await loadSectionsData();
    }, AUTO_UPDATE_INTERVAL_MS);
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
 */
function showLoading() {
    const loading = document.getElementById('loading');
    if (loading) {
        loading.style.display = 'block';
    }
}

/**
 * –°–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
 */
function hideLoading() {
    const loading = document.getElementById('loading');
    if (loading) {
        loading.style.display = 'none';
    }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
 */
function showError(message) {
    const errorDiv = document.getElementById('error');
    if (errorDiv) {
        errorDiv.textContent = message;
        errorDiv.style.display = 'block';
        
        setTimeout(() => {
            errorDiv.style.display = 'none';
        }, 5000);
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å
 */
function updateStatus(status) {
    const indicator = document.getElementById('status-indicator');
    if (indicator) {
        indicator.className = `status-indicator status-${status}`;
    }
    
    const lastUpdated = document.getElementById('last-updated');
    if (lastUpdated) {
        lastUpdated.textContent = new Date().toLocaleString('ru-RU');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', initDashboard);
