#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–µ–º
"""

import os
import json
import time
import tempfile
import shutil
from unittest.mock import patch, MagicMock

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –∫—ç—à—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
if os.name == 'nt':  # Windows
    CACHE_PATH = os.path.join(tempfile.gettempdir(), 'metrics_cache.json')
    TEST_CACHE_DIR = os.path.join(tempfile.gettempdir(), 'test_cache_dir')
else:  # Unix/Linux
    CACHE_PATH = '/tmp/metrics_cache.json'
    TEST_CACHE_DIR = '/tmp/test_cache_dir'

def test_empty_cache_file():
    """–¢–µ—Å—Ç: –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –∫—ç—à–∞"""
    print("\n=== –¢–µ—Å—Ç: –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª –∫—ç—à–∞ ===")
    
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
    with open(CACHE_PATH, 'w') as f:
        pass
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    import app.metrics as metrics
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—ç—à –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
    metrics.load_cache_from_file()
    print("‚úÖ –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª –∫—ç—à–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_corrupted_cache_file():
    """–¢–µ—Å—Ç: –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫—ç—à–∞"""
    print("\n=== –¢–µ—Å—Ç: –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫—ç—à–∞ ===")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π JSON
    with open(CACHE_PATH, 'w') as f:
        f.write('{"invalid": json}')
    
    import app.metrics as metrics
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    metrics.load_cache_from_file()
    print("‚úÖ –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫—ç—à–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_missing_cache_file():
    """–¢–µ—Å—Ç: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –∫—ç—à–∞"""
    print("\n=== –¢–µ—Å—Ç: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –∫—ç—à–∞ ===")
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists(CACHE_PATH):
        os.remove(CACHE_PATH)
    
    import app.metrics as metrics
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    metrics.load_cache_from_file()
    print("‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –∫—ç—à–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_valid_cache_file():
    """–¢–µ—Å—Ç: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª –∫—ç—à–∞"""
    print("\n=== –¢–µ—Å—Ç: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª –∫—ç—à–∞ ===")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫—ç—à
    valid_cache = {
        "metrics": {
            "test_metric_1": 42.0,
            "test_metric_2": 100.0
        },
        "history": {
            "test_metric_1": [[time.time(), 42.0]],
            "test_metric_2": [[time.time(), 100.0]]
        },
        "last_updated": time.time(),
        "cache_version": "1.0"
    }
    
    with open(CACHE_PATH, 'w') as f:
        json.dump(valid_cache, f)
    
    import app.metrics as metrics
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    metrics.load_cache_from_file()
    print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª –∫—ç—à–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")

def test_cache_save_with_errors():
    """–¢–µ—Å—Ç: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞ —Å –æ—à–∏–±–∫–∞–º–∏"""
    print("\n=== –¢–µ—Å—Ç: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞ —Å –æ—à–∏–±–∫–∞–º–∏ ===")
    
    import app.metrics as metrics
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∑–∞–ø–∏—Å–∏
    with patch('builtins.open', side_effect=PermissionError("Permission denied")):
        metrics.save_cache_to_file()
        print("‚úÖ –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_cache_directory_creation():
    """–¢–µ—Å—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫—ç—à–∞"""
    print("\n=== –¢–µ—Å—Ç: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫—ç—à–∞ ===")
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º –ø—É—Ç—å –∫—ç—à–∞
    original_cache_file = CACHE_PATH
    test_cache_file = os.path.join(TEST_CACHE_DIR, 'metrics_cache.json')
    
    import app.metrics as metrics
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å
    original_path = metrics.CACHE_FILE
    metrics.CACHE_FILE = test_cache_file
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        metrics.ensure_cache_directory()
        
        if os.path.exists(TEST_CACHE_DIR):
            print("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫—ç—à–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫—ç—à–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å")
            
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å
        metrics.CACHE_FILE = original_path
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        if os.path.exists(TEST_CACHE_DIR):
            shutil.rmtree(TEST_CACHE_DIR)

def test_cache_validation():
    """–¢–µ—Å—Ç: –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫—ç—à–∞"""
    print("\n=== –¢–µ—Å—Ç: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫—ç—à–∞ ===")
    
    import app.metrics as metrics
    
    # –¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    valid_data = {
        "metrics": {"test": 1.0},
        "history": {"test": [[time.time(), 1.0]]}
    }
    
    if metrics.validate_cache_data(valid_data):
        print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é")
    else:
        print("‚ùå –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
    
    # –¢–µ—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    invalid_data = {
        "metrics": "not_a_dict",
        "history": {"test": "not_a_list"}
    }
    
    if not metrics.validate_cache_data(invalid_data):
        print("‚úÖ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω—è—é—Ç—Å—è –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π")
    else:
        print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é")

def test_cache_cleanup():
    """–¢–µ—Å—Ç: –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫—ç—à–∞"""
    print("\n=== –¢–µ—Å—Ç: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫—ç—à–∞ ===")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    cache_dir = os.path.dirname(CACHE_PATH)
    old_file = os.path.join(cache_dir, 'metrics_cache.json.corrupted.1234567890')
    with open(old_file, 'w') as f:
        f.write('old corrupted data')
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (25 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥)
    old_time = time.time() - 90000  # 25 —á–∞—Å–æ–≤
    os.utime(old_file, (old_time, old_time))
    
    import app.metrics as metrics
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
    metrics.cleanup_old_cache_files()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω
    if not os.path.exists(old_file):
        print("‚úÖ –°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∫—ç—à–∞ —É–¥–∞–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ùå –°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∫—ç—à–∞ –Ω–µ —É–¥–∞–ª–µ–Ω")

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫—ç—à–∞...")
    
    try:
        test_empty_cache_file()
        test_corrupted_cache_file()
        test_missing_cache_file()
        test_valid_cache_file()
        test_cache_save_with_errors()
        test_cache_directory_creation()
        test_cache_validation()
        test_cache_cleanup()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∫—ç—à–∞ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    run_all_tests() 